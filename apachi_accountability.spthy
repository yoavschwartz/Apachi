theory apachi_accountability
begin

/*
 *  Author: Yoav S. & Nicolai S.
 *  Model Name: apachi_accountability.spthy
 *  Status: DEVELOPMENTAL
 *
 */

builtins: hashing, asymmetric-encryption, symmetric-encryption
functions: commit/2, commitRelationProof/2, makeDiscussion/2, makeGrade/1, makeReview/3,
           paper/1 [private], randomness/1 [private], id/1 [private], gradeProof/2,
           revealSign/2 [private], getMessage/1, nonce/1 [private]
equations: getMessage(revealSign(m, privk)) = m


rule Generate_revealing_signature:
    [In(m), In(~sk)]
  --[KSign(revealSign(m, ~sk))]->
    [Out(revealSign(m, ~sk))]

rule Generate_paper:
    [Fr(~p)]
  --[]->
    [Out(paper(~p))]

rule Generate_randomness:
    [Fr(~r)]
  --[GenerateRandomness(randomness(~r))]->
    [Out(randomness(~r))]

rule Generate_id:
    [Fr(~id)]
  --[]->
    [Out(id(~id))]

rule Generate_nonce:
    [Fr(~nonce)]
  --[]->
    [Out(nonce(~nonce))]


/*
Create a log which an adversary can use
*/

rule Log_out:
    [Log_Out(m)]
  --[Outed(m)]->
    [!On_Log(m)]

rule Log_in:
    [!On_Log(m)]
  --[]->
    [Log_In(m)]

rule Adversary_Log_in:
    [In(m)]
  --[AdversaryIn(), PublicLog(m)]->
    [!On_Log(m)]

rule Adversary_Log_out:
    [!On_Log(m)]
  --[AdversaryOut()]->
    [Out(m)]


/*
Setup actors
*/

rule Setup:
    let
    pc_pubk = pk(~pc_privk)
    in
    [Fr(~pc_privk)]
  --[OnlyOnceWith('Setup'),
     KeySecret(~pc_privk),
     PCPrivk(~pc_privk)]->
    [!Setup_Submitter(pc_pubk),
     Setup_PC($PC, ~pc_privk),
     !Setup_Reviewer(pc_pubk),
     Reveal_Key_PC(~pc_privk)]

rule Setup_pc:
    [Setup_PC($PC, ~pc_privk)]
  --[OnlyOnceWith('Setup_PC')]->
    [!PC($PC, ~pc_privk),
     Out(pk(~pc_privk))]

rule Setup_reviewer:
    let
    pc_pubk = pk(~pc_privk)
    in
    [!Setup_Reviewer(pc_pubk),
     Fr(~reviewer_key),
     Fr(~reviewer_privk)]
  --[ReviewerSetup(~reviewer_key, ~reviewer_privk),
     OnlyOnceWith(<'Setup_Reviewer', $Reviewer>),
	   SymmetricKey(~reviewer_key),
	   ReviewerKey(~reviewer_key),
     ReviewerPrivateKey(~reviewer_privk)]->
    [!PC_Reviewer_Association($Reviewer, ~reviewer_key, pk(~reviewer_privk)),
     Out(~reviewer_key),
     Out(~reviewer_privk)]


/*
Key reveal
*/

rule Key_reveal_PC:
    [Reveal_Key_PC(key)]
  --[KeyRevealedPC(key)]->
    [Out(key)]


/*
Phase 1: Submission
1. Submitter send paper to PC and commits to it on the log
2. PC receives the paper and commits to it on the log
*/

rule Submission_2_pc_receives_submission:
  let
    paper_commit = commit(paper(~paper), randomness(~r_submit))
    identity_commit = commit(id(~id), randomness(~r_id))
    signed_commits = revealSign(<paper_commit, identity_commit>, ~submitter_privk)
    submission = senc(<paper(~paper), randomness(~r_submit), randomness(~r_review)>, ~submitter_key)
    submission_key = aenc(~submitter_key, pk(~pc_privk))
    signed_submission = revealSign(<submission, submission_key>, ~submitter_privk)

    signed_paper_commit = revealSign(paper_commit, ~pc_privk)
  in
    [!PC($PC, ~pc_privk),
     Fr(~group_key),
     Fr(~r_grade),
     Log_In(signed_commits),
     Log_In(signed_submission)]
  --[PCReceivedPaper(~pc_privk, paper_commit),
     PCReceivedSubmissionFrom(~submitter_privk),
     PublicLog(signed_paper_commit),
     OnlyOnceWith(<'Submission_2', ~paper>),
     SymmetricKey(~group_key),
     SymmetricKey(~submitter_key),
     SubmitterKey(~submitter_key),
     RGrade(~r_grade),
     RSubmit(~r_submit),
     RReview(~r_review),
     GroupKey(~group_key),
     GenerateRandomness(randomness(~r_grade)),
     SubmitterKeyReceived(~submitter_key),
     NotEq(~r_submit, ~r_review)]->
    [!Received_Submission(paper(~paper), randomness(~r_submit), randomness(~r_review), ~submitter_key, signed_commits),
     Log_Out(signed_paper_commit),
     !Group_For_Paper(paper(~paper), ~group_key, ~r_grade),
     Reveal_Key_PC(~group_key),
     Reveal_Key_PC(~submitter_key)]


/*
Phase 2: Matching
1. PC sends the paper to a Reviewer via the log
2. Reviewers sends bid to PC via the log
3. PC receives bid from the log & publishes makes a matching and publishes it to the log and sends matching secrets to the Reviewer via the log
*/

rule Matching_1_pc_sends_paper:
  let
    encrypted_paper = senc(revealSign(paper(~paper), ~pc_privk), ~reviewer_key)
  in
    [!PC_Reviewer_Association($Reviewer, ~reviewer_key, pk(~reviewer_privk)),
     !Received_Submission(paper(~paper), randomness(~r_submit), randomness(~r_review), ~submitter_key, signed_commits),
     !PC($PC, ~pc_privk)]
  --[OnlyOnceWith(<'Matching_1', $Reviewer, ~paper>),
     PublicLog(encrypted_paper),
     PCSendsPaperToReviewer($Reviewer, paper(~paper))]->
    [Log_Out(encrypted_paper),
     Send_Paper_To_Reviewer($Reviewer, paper(~paper))]

rule Matching_3_pc_matches_paper:
  let
    encrypted_bid = senc(revealSign(<paper(~paper), 'bid'>, ~reviewer_privk), ~reviewer_key)

    review_paper_commit = commit(paper(~paper), randomness(~r_review))
    submit_paper_commit = commit(paper(~paper), randomness(~r_submit))
    matching = revealSign(<review_paper_commit, pk(~reviewer_privk), nonce(~pc_review_nonce)>, ~pc_privk)
    matching_secret = revealSign(senc(<paper(~paper), randomness(~r_review)>, ~reviewer_key), ~pc_privk)
    commit_relation_proof = commitRelationProof(review_paper_commit, submit_paper_commit)
  in
    [!PC($PC, ~pc_privk),
     Fr(~pc_review_nonce),
     !Received_Submission(paper(~paper), randomness(~r_submit), randomness(~r_review), ~submitter_key, signed_commits),
     !Group_For_Paper(paper(~paper), ~group_key, ~r_grade),
     !PC_Reviewer_Association($Reviewer, ~reviewer_key, pk(~reviewer_privk)),
     Send_Paper_To_Reviewer($Reviewer, paper(~paper)),
     Log_In(encrypted_bid)]
  --[MatchedPaper(paper(~paper), $Reviewer, nonce(~pc_review_nonce)),
     OnlyOnceWith(<'Matching_4', $Reviewer, ~paper>),
     PublicLog(matching),
     PublicLog(matching_secret),
     PublicLog(commit_relation_proof)]->
    [PC_Waiting_For_Review(paper(~paper), randomness(~r_grade), $Reviewer, ~group_key, ~pc_review_nonce, randomness(~r_review)),
     Log_Out(matching),
     Log_Out(matching_secret),
     Log_Out(commit_relation_proof)]


/*
Phase 3: Review
*/     

rule Review_2_pc_receives_review:
  let
    review = makeReview(paper(~paper), nonce(~pc_review_nonce), nonce(~reviewer_review_nonce))
    signed_review = revealSign(review, ~reviewer_privk)
    encrypted_review = senc(signed_review, ~reviewer_key)
    commit_paper_reviewed = revealSign(<commit(paper(~paper), randomness(~r_review)), nonce(~pc_review_nonce)>, ~reviewer_privk)

    encrypted_r_grade_and_group_key = senc(revealSign(<~group_key, randomness(~r_grade)>, ~pc_privk), ~reviewer_key)
    group_message = senc(revealSign(review, ~reviewer_privk), ~group_key)
  in
    [!PC($PC, ~pc_privk),
     PC_Waiting_For_Review(paper(~paper), randomness(~r_grade), $Reviewer, ~group_key, ~pc_review_nonce, randomness(~r_review)),
     !Group_For_Paper(paper(~paper), ~group_key, ~r_grade),
     !PC_Reviewer_Association($Reviewer, ~reviewer_key, pk(~reviewer_privk)),
     Log_In(encrypted_review),
     Log_In(commit_paper_reviewed)]
  --[PCReceivedReviewFromReviewer($Reviewer, paper(~paper), ~group_key, randomness(~r_grade)),
     PublicLog(encrypted_r_grade_and_group_key),
     PublicLog(group_message)]->
    [PC_Waiting_For_Discussion(paper(~paper), randomness(~r_grade), $Reviewer, ~group_key, ~pc_review_nonce, signed_review),
     Log_Out(encrypted_r_grade_and_group_key),
     Log_Out(group_message)]


/*
Phase 5: Decision
1. PC receives discussion and grade from log
2. PC picks if paper is accepted or rejected and uncommits appropiate commits
*/

rule Decision_1_pc_receives_discussion_and_grade:
  let
    discussion = makeDiscussion(paper(~paper), ~discussion_nonce)
    grade = makeGrade(paper(~paper))
    encrypted_discussion = senc(revealSign(discussion, ~reviewer_privk), ~group_key)
    encrypted_conclusion = senc(revealSign(grade, ~reviewer_privk), ~group_key)
  	paper_review_commit = commit(paper(~paper), randomness(~r_review))
  	grade_commit = commit(grade, randomness(~r_grade))
  	signed_commits = revealSign(<paper_review_commit, grade_commit, nonce(~pc_review_nonce)>, ~reviewer_privk)

    feedback = senc(revealSign(<grade, signed_review>, ~pc_privk), ~submitter_key)
  in
    [!PC($PC, ~pc_privk),
     PC_Waiting_For_Discussion(paper(~paper), randomness(~r_grade), $Reviewer, ~group_key, ~pc_review_nonce, signed_review),
     !PC_Reviewer_Association($Reviewer, ~reviewer_key, pk(~reviewer_privk)),
     !Received_Submission(paper(~paper), randomness(~r_submit), randomness(~r_review), ~submitter_key, signed_submission_commits),
     Log_In(encrypted_discussion),
     Log_In(encrypted_conclusion),
     Log_In(signed_commits)]
  --[PCReceivedDiscussionFromReviewer($Reviewer, paper(~paper), ~group_key),
     OnlyOnceWith(<'Decision_1', paper(~paper), $Reviewer>),
     PublicLog(feedback),
     SubmitterKeyUsed(~submitter_key)]->
    [Ready_For_Decision(paper(~paper), grade, randomness(~r_submit), randomness(~r_review), randomness(~r_grade), ~reviewer_privk, ~group_key),
     Log_Out(feedback)]

rule Decision_2_1_pc_paper_accepted:
  let
    accepted = <paper(~paper), randomness(~r_submit)>
    accepted_out = revealSign(accepted, ~pc_privk)
    grade = makeGrade(paper(~paper))
    signed_grade = revealSign(grade, ~pc_privk)
    grade_proof = revealSign(gradeProof(grade, commit(grade, randomness(~r_grade))), ~pc_privk)
  in
    [!PC($PC, ~pc_privk),
     Ready_For_Decision(paper(~paper), grade, randomness(~r_submit), randomness(~r_review), randomness(~r_grade), ~reviewer_privk, ~group_key),
     !PC_Reviewer_Association($Reviewer, ~reviewer_key, pk(~reviewer_privk))]
  --[PaperAccepted(commit(paper(~paper), randomness(~r_review))),
     BindReviewer($Reviewer, ~reviewer_key, ~reviewer_privk),
     PublicLog(accepted_out),
     PublicLog(signed_grade),
     PublicLog(grade_proof),
     OnlyOnceWith(<'conclusion', ~paper>)]->
    [Log_Out(accepted_out),
     Log_Out(signed_grade),
     Log_Out(grade_proof),
     Waiting_For_Paper_Claim(~paper)]

rule Decision_2_2_pc_paper_rejected:
  let
    rejected_out = revealSign(<commit(paper(~paper), randomness(~r_review)), randomness(~r_grade), grade>, ~pc_privk)
  in
    [!PC($PC, ~pc_privk),
     Ready_For_Decision(paper(~paper), grade, randomness(~r_submit), randomness(~r_review), randomness(~r_grade), ~reviewer_privk, ~group_key)]
  --[PaperRejected(commit(paper(~paper), randomness(~r_review))),
     PublicLog(rejected_out),
     OnlyOnceWith(<'conclusion', ~paper>)]->
    [Log_Out(rejected_out)]


/*
Phase 6: Claim
1. Submitter receives feedback from log
2. Submitter claims paper
3. PC confirms paper ownership
*/

rule Claim_3_PC_confirms_paper_ownership:
  let
    signed_paper_claim = revealSign(<paper(~paper), id(~id), randomness(~r_id)>, ~submitter_privk)
    paper_commit = commit(paper(~paper), randomness(~r_submit))
    identity_commit = commit(id(~id), randomness(~r_id))
    signed_commits = revealSign(<paper_commit, identity_commit>, ~submitter_privk)

    signed_paper_claim_confirmation = revealSign(<paper(~paper), id(~id), randomness(~r_id)>, ~pc_privk)
  in
    [!PC($PC, ~pc_privk),
     !Received_Submission(paper(~paper), randomness(~r_submit), randomness(~r_review), ~submitter_key, signed_commits),
     Waiting_For_Paper_Claim(~paper),
     Log_In(signed_paper_claim)]
  --[PublicLog(signed_paper_claim_confirmation),
     RId(~r_id),
     PaperClaimConfirmed(paper(~paper), id(~id), randomness(~r_id))]->
    [Log_Out(signed_paper_claim_confirmation)]



/*
-------------------------------------------------------------------------------
===============================================================================
                                   Lemmas
===============================================================================
-------------------------------------------------------------------------------
*/

lemma helper_randomness_is_generated [reuse]:
"All r #i.
  KU(randomness(r)) @i
  ==>
  (Ex #j.
    GenerateRandomness(randomness(r)) @j &
    j < i
  )
"


/*
=======================
Accountability
=======================
*/

//-------Paper accepted--------------------------------------------------------


lemma paper_accepted_accountability_completeness:
"All R R2 id r_id g_k p r_review r_submit pc_privk n r_grade
     #a #b #c #d #e #f #g.

  // Goal convergent
  PCReceivedPaper(pc_privk, commit(paper(p), r_submit)) @a &
  PCSendsPaperToReviewer(R, paper(p)) @b &
  MatchedPaper(paper(p), R, nonce(n)) @c &
  PCReceivedReviewFromReviewer(R, paper(p), g_k, r_grade) @d &
  PCReceivedDiscussionFromReviewer(R2, paper(p), g_k) @e &
  PaperAccepted(commit(paper(p), r_review)) @f &
  PaperClaimConfirmed(paper(p), id(id), r_id) @g &

  a < b &
  b < d &
  c < e &
  d < e &
  e < f &
  f < g &

  not(Ex k #k. KeyRevealedPC(k) @k)

==>

  // Accountability test is false
  (Ex r_privk s_privk grade
  #j #k #l #m #n #o #p #q.

  // Paper submit and identity commit log made by Submitter
  PublicLog(revealSign(<commit(paper(p), r_submit), commit(id(id), r_id)>, s_privk)) @j &

  // Paper submit commit log made by PC
  PublicLog(revealSign(commit(paper(p), r_submit), pc_privk)) @k &

  // Paper matching log made by PC
  PublicLog(revealSign(<commit(paper(p), r_review), pk(r_privk), nonce(n)>, pc_privk)) @l &

  // Paper review commit log made by Reviewer
  PublicLog(revealSign(<commit(paper(p), r_review), nonce(n)>, r_privk)) @m &

  // Paper discussion and grade commit log made by Reviewer
  PublicLog(revealSign(<commit(paper(p), r_review), commit(grade, r_grade), nonce(n)>, r_privk)) @n &

  // Grade reveal log made by PC
  PublicLog(revealSign(grade, pc_privk)) @o &

  // Grade proof log made by PC (this is modelled as a one to one proof, but the protocol has a many to many proof instead)
  PublicLog(revealSign(gradeProof(grade, commit(grade, r_grade)), pc_privk)) @o &

  // Paper acceptance log made by PC
  PublicLog(revealSign(<paper(p), r_submit>, pc_privk)) @o &

  // Paper claim log made by Submitter
  PublicLog(revealSign(<paper(p), id(id), r_id>, s_privk)) @p &

  // Paper ownership confirmation log made by PC
  PublicLog(revealSign(<paper(p), id(id), r_id>, pc_privk)) @q &

  // Making sure that things happen in right order
  #j < #k &
  #k < #l &
  #l < #m &
  #l < #n &
  #n < #o &
  #p < #q &
  #o < #q
  )
"

lemma paper_accepted_accountability_soundness_1_exists_trace_where_false:
exists-trace
"Ex p id r_id pc_privk #a #b.

  // Binding the PC privk to a real PC
  PCPrivk(pc_privk) @a &

  // Paper Claimed Confirmed
  PublicLog(revealSign(<paper(p), id(id), r_id>, pc_privk)) @b &

  // The accountability test is true
  not(Ex r_privk r_submit r_review s_privk grade r_grade n
         #j #k #l #m #n #o #p #q.

    // Paper submit and identity commit log made by Submitter
    PublicLog(revealSign(<commit(paper(p), r_submit), commit(id(id), r_id)>, s_privk)) @j &

    // Paper submit commit log made by PC
    PublicLog(revealSign(commit(paper(p), r_submit), pc_privk)) @k &

    // Paper matching log made by PC
    PublicLog(revealSign(<commit(paper(p), r_review), pk(r_privk), nonce(n)>, pc_privk)) @l &

    // Paper review commit log made by Reviewer
    PublicLog(revealSign(<commit(paper(p), r_review), nonce(n)>, r_privk)) @m &

    // Paper discussion and grade commit log made by Reviewer
    PublicLog(revealSign(<commit(paper(p), r_review), commit(grade, r_grade), nonce(n)>, r_privk)) @n &

    // Grade reveal log made by PC
    PublicLog(revealSign(grade, pc_privk)) @o &

    // Grade proof log made by PC (this is modelled as a one to one proof, but the protocol has a many to many proof instead)
    PublicLog(revealSign(gradeProof(grade, commit(grade, r_grade)), pc_privk)) @o &

    // Paper acceptance log made by PC
    PublicLog(revealSign(<paper(p), r_submit>, pc_privk)) @o &

    // Paper claim log made by Submitter
    PublicLog(revealSign(<paper(p), id(id), r_id>, s_privk)) @p &

    // Paper ownership confirmation log made by PC
    PublicLog(revealSign(<paper(p), id(id), r_id>, pc_privk)) @q &

    // Making sure that things happen in right order
    #j < #k &
    #k < #l &
    #l < #m &
    #l < #n &
    #n < #o &
    #p < #q &
    #o < #q
  )
"

lemma paper_accepted_accountability_soundness_2_not_goal_adversary:
"All p pc_privk id r_id
     #a #b.

  // Binding the PC privk to a real PC
  PCPrivk(pc_privk) @a &

  // Paper Claimed Confirmed
  PublicLog(revealSign(<paper(p), id(id), r_id>, pc_privk)) @b &

    // The accountability test is true
  not(Ex r_privk r_submit r_review s_privk grade r_grade n
         #j #k #l #m #n #o #p #q.

    // Paper submit and identity commit log made by Submitter
    PublicLog(revealSign(<commit(paper(p), r_submit), commit(id(id), r_id)>, s_privk)) @j &

    // Paper submit commit log made by PC
    PublicLog(revealSign(commit(paper(p), r_submit), pc_privk)) @k &

    // Paper matching log made by PC
    PublicLog(revealSign(<commit(paper(p), r_review), pk(r_privk), nonce(n)>, pc_privk)) @l &

    // Paper review commit log made by Reviewer
    PublicLog(revealSign(<commit(paper(p), r_review), nonce(n)>, r_privk)) @m &

    // Paper discussion and grade commit log made by Reviewer
    PublicLog(revealSign(<commit(paper(p), r_review), commit(grade, r_grade), nonce(n)>, r_privk)) @n &

    // Grade reveal log made by PC
    PublicLog(revealSign(grade, pc_privk)) @o &

    // Grade proof log made by PC (this is modelled as a one to one proof, but the protocol has a many to many proof instead)
    PublicLog(revealSign(gradeProof(grade, commit(grade, r_grade)), pc_privk)) @o &

    // Paper acceptance log made by PC
    PublicLog(revealSign(<paper(p), r_submit>, pc_privk)) @o &

    // Paper claim log made by Submitter
    PublicLog(revealSign(<paper(p), id(id), r_id>, s_privk)) @p &

    // Paper ownership confirmation log made by PC
    PublicLog(revealSign(<paper(p), id(id), r_id>, pc_privk)) @q &

    // Making sure that things happen in right order
    #j < #k &
    #k < #l &
    #l < #m &
    #l < #n &
    #n < #o &
    #p < #q &
    #o < #q
  )

==>
  Ex k #a.
  KeyRevealedPC(k) @a
"


//-------Paper rejected--------------------------------------------------------

lemma paper_rejected_accountability_completeness:
"All review_commit p pc_privk submit_commit R R2 g_k r_grade r_review r_submit n
     #a #b #c #d #e #f.

  // Goal convergent
  PCReceivedPaper(pc_privk, submit_commit) @a &
  submit_commit = commit(paper(p), r_submit) &
  PCSendsPaperToReviewer(R, paper(p)) @b &
  MatchedPaper(paper(p), R, nonce(n)) @c &
  PCReceivedReviewFromReviewer(R, paper(p), g_k, r_grade) @d &
  PCReceivedDiscussionFromReviewer(R2, paper(p), g_k) @e &
  PaperRejected(review_commit) @f &
  review_commit = commit(paper(p), r_review) &

  a < b &
  b < c &
  c < e &
  d < f &
  e < f &

  not(Ex k #k. KeyRevealedPC(k) @k)

==>

  // Accountability test is false
  (Ex r_privk s_privk grade id_commit
      #j #k #l #m #n #o.

    // Paper submit and identity commit log made by Submitter
    PublicLog(revealSign(<submit_commit, id_commit>, s_privk)) @j &

    // Paper submit commit log made by PC
    PublicLog(revealSign(submit_commit, pc_privk)) @k &

    // Paper matching log made by PC
    PublicLog(revealSign(<review_commit, pk(r_privk), nonce(n)>, pc_privk)) @l &

    // Proof that submit and review commit are hiding the same paper log by PC
    PublicLog(commitRelationProof(review_commit, submit_commit)) @l &

    // Paper review commit log made by Reviewer
    PublicLog(revealSign(<review_commit, nonce(n)>, r_privk)) @m &

    // Paper discussion and grade commit log made by Reviewer
    PublicLog(revealSign(<review_commit, commit(grade, r_grade), nonce(n)>, r_privk)) @n &

    // Paper rejected log made by PC
    PublicLog(revealSign(<review_commit, r_grade, grade>, pc_privk)) @o &

    // Making sure that things happen in right order
    #j < #k &
    #k < #l &
    #l < #m &
    #l < #n &
    #n < #o
  )
"

lemma paper_rejected_accountability_soundness_1_exists_trace_where_false:
exists-trace
"Ex r_grade grade pc_privk review_commit
     #a #b.

  // Binding the PC privk to a real PC
  PCPrivk(pc_privk) @a &

  // Paper rejected log made by PC
  PublicLog(revealSign(<'rejected', review_commit, r_grade, grade>, pc_privk)) @b &

  // Accountability test is true
  not(Ex s_privk r_privk submit_commit id_commit n
         #j #k #l #m #n #o.

    // Paper submit and identity commit log made by Submitter
    PublicLog(revealSign(<submit_commit, id_commit>, s_privk)) @j &

    // Paper submit commit log made by PC
    PublicLog(revealSign(submit_commit, pc_privk)) @k &

    // Paper matching log made by PC
    PublicLog(revealSign(<review_commit, pk(r_privk), nonce(n)>, pc_privk)) @l &

    // Proof that submit and review commit are hiding the same paper log by PC
    PublicLog(commitRelationProof(review_commit, submit_commit)) @l &

    // Paper review commit log made by Reviewer
    PublicLog(revealSign(<review_commit, nonce(n)>, r_privk)) @m &

    // Paper discussion and grade commit log made by Reviewer
    PublicLog(revealSign(<review_commit, commit(grade, r_grade), nonce(n)>, r_privk)) @n &

    // Paper rejected log made by PC
    PublicLog(revealSign(<review_commit, r_grade, grade>, pc_privk)) @o &

    // Making sure that things happen in right order
    #j < #k &
    #k < #l &
    #l < #m &
    #l < #n &
    #n < #o
  )
"

lemma paper_rejected_accountability_soundness_2_true_no_adversary:
"All r_grade grade pc_privk review_commit
     #a #b.

  // Binding the PC privk to a real PC
  PCPrivk(pc_privk) @a &

  // Paper rejected log made by PC
  PublicLog(revealSign(<review_commit, randomness(r_grade), grade>, pc_privk)) @b &

  // Accountability test is true
  not(Ex s_privk r_privk submit_commit id_commit n
         #j #k #l #m #n #o.

    // Paper submit and identity commit log made by Submitter
    PublicLog(revealSign(<submit_commit, id_commit>, s_privk)) @j &

    // Paper submit commit log made by PC
    PublicLog(revealSign(submit_commit, pc_privk)) @k &

    // Paper matching log made by PC
    PublicLog(revealSign(<review_commit, pk(r_privk), nonce(n)>, pc_privk)) @l &

    // Proof that submit and review commit are hiding the same paper log by PC
    PublicLog(commitRelationProof(review_commit, submit_commit)) @l &

    // Paper review commit log made by Reviewer
    PublicLog(revealSign(<review_commit, nonce(n)>, r_privk)) @m &

    // Paper discussion and grade commit log made by Reviewer
    PublicLog(revealSign(<review_commit, commit(grade, randomness(r_grade)), nonce(n)>, r_privk)) @n &

    // Paper rejected log made by PC
    PublicLog(revealSign(<review_commit, randomness(r_grade), grade>, pc_privk)) @o &

    // Making sure that things happen in right order
    #j < #k &
    #k < #l &
    #l < #m &
    #l < #n &
    #n < #o
  )

==>
  Ex k #a.
  KeyRevealedPC(k) @a
"

/*
=============
Sanity lemmas
=============
*/
/*
lemma sanity_one:
exists-trace
"Ex p s_id r_id #i.
    PaperClaimConfirmed(p, s_id, r_id) @i
"

lemma sanity_only_paper_rejected:
exists-trace
"Ex p r #r.
   PaperRejected(commit(p,r)) @r
"
*/

/*
============
Restrictions
============
*/

restriction NotEq:
"All x y #i. NotEq(x,y) @i ==> not(x = y)"

restriction OnlyOnceWith:
"All x #i #j. OnlyOnceWith(x) @i & OnlyOnceWith(x) @j ==> #i = #j"

restriction TypeSymmetricKeys:
"All m k #i #j. SymmetricKey(k) @i & KSign(revealSign(m, k)) @j ==> F"

restriction UniqueLog:
"All m #i #j. PublicLog(m) @i & PublicLog(m) @j ==> #i = #j"

restriction ReviewNotSubmitter:
"All s_privk #i #j. PCReceivedSubmissionFrom(s_privk) @i & ReviewerPrivateKey(s_privk) @j ==> Ex k #k. KeyRevealedPC(k) @k"

restriction GroupKeyNotSubmitterKey:
"All k #i #j. GroupKey(k) @i & SubmitterKey(k) @j ==> Ex k #k. KeyRevealedPC(k) @k"

restriction ReviewerKeyNotSubmitterKey:
"All k #i #j. ReviewerKey(k) @i & SubmitterKey(k) @j ==> Ex k #k. KeyRevealedPC(k) @k"

restriction ReviewerPrivateKeyNotSubmitterKey:
"All k #i #j. ReviewerPrivateKey(k) @i & SubmitterKey(k) @j ==> Ex k #k. KeyRevealedPC(k) @k"

restriction RSubmitNotRGrade:
"All r #i #j. RSubmit(r) @i & RGrade(r) @j ==> Ex k #k. KeyRevealedPC(k) @k"

restriction RReviewNotRGrade:
"All r #i #j. RReview(r) @i & RGrade(r) @j ==> Ex k #k. KeyRevealedPC(k) @k"

restriction RIdNotRGrade:
"All r #i #j. RId(r) @i & RGrade(r) @j ==> Ex k #k. KeyRevealedPC(k) @k"

end
